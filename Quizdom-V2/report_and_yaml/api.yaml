openapi: 3.0.0
info:
  title: Quizdom V2 API
  version: "1.0"
  description: REST API for Quizdom V2

servers:
  - url: http://localhost:5000

paths:
  /login:
    post:
      summary: User/Admin Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials

  /signup:
    post:
      summary: User Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '200':
          description: Signup successful
        '400':
          description: User already exists

  /add_subject/get:
    get:
      summary: Get all subjects (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of subjects

  /add_subject/post:
    post:
      summary: Add a new subject (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        '200':
          description: Subject added

  /edit_subject/{sub_id}:
    put:
      summary: Update a subject (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: sub_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
      responses:
        '200':
          description: Subject updated

  /delete_subject/{sub_id}:
    delete:
      summary: Delete a subject (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: sub_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Subject deleted

  /add_chapter/get:
    get:
      summary: Get all chapters (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of chapters

  /add_chapter/{sub_id}:
    post:
      summary: Add a new chapter to a subject (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: sub_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chapter'
      responses:
        '200':
          description: Chapter added

  /edit_chapter/{chap_id}:
    put:
      summary: Update a chapter (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: chap_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Chapter'
      responses:
        '200':
          description: Chapter updated

  /delete_chapter/{chap_id}:
    delete:
      summary: Delete a chapter (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: chap_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Chapter deleted

  /add_quiz:
    post:
      summary: Add a new quiz (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quiz'
      responses:
        '200':
          description: Quiz added

  /get_quiz:
    get:
      summary: Get all quizzes (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of quizzes

  /edit_quiz/{quiz_id}:
    put:
      summary: Update a quiz (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: quiz_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quiz'
      responses:
        '200':
          description: Quiz updated

  /delete_quiz/{quiz_id}:
    delete:
      summary: Delete a quiz (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: quiz_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Quiz deleted

  /add_question/{quiz_id}:
    post:
      summary: Add a new question to a quiz (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: quiz_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '200':
          description: Question added

  /get_questions/{quiz_id}:
    get:
      summary: Get all questions for a quiz (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: quiz_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of questions

  /edit_question/{question_id}:
    put:
      summary: Update a question (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '200':
          description: Question updated

  /delete_question/{question_id}:
    delete:
      summary: Delete a question (admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Question deleted

  /export_details:
    get:
      summary: Export user's scores as CSV (user only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Scores exported

  /start_quiz/{quiz_id}:
    get:
      summary: Get quiz details and questions for a user to attempt (user only)
      security:
        - bearerAuth: []
      parameters:
        - name: quiz_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Quiz data
    post:
      summary: Submit user's quiz answers (user only)
      security:
        - bearerAuth: []
      parameters:
        - name: quiz_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question_answer:
                  type: object
                  additionalProperties:
                    type: string
      responses:
        '200':
          description: Quiz submitted

  /user_scorecard:
    get:
      summary: Get all quiz scores for the logged-in user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of scores

  /admin_stats:
    get:
      summary: Get platform-wide analytics (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Analytics data

  /user_stats:
    get:
      summary: Get personal analytics for the logged-in user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Analytics data

  /manage_user:
    get:
      summary: Get all non-admin users (admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      properties:
        user_name:
          type: string
        user_password:
          type: string
      required: [user_name, user_password]

    SignupRequest:
      type: object
      properties:
        user_name:
          type: string
        user_email:
          type: string
        user_password:
          type: string
        user_complete_name:
          type: string
        user_dob:
          type: string
          format: date
        user_education_level:
          type: string
      required: [user_name, user_email, user_password, user_complete_name, user_dob, user_education_level]

    Subject:
      type: object
      properties:
        subject_name:
          type: string
        subject_description:
          type: string
      required: [subject_name, subject_description]

    Chapter:
      type: object
      properties:
        chapter_name:
          type: string
        chapter_description:
          type: string
      required: [chapter_name, chapter_description]

    Quiz:
      type: object
      properties:
        quiz_name:
          type: string
        quiz_description:
          type: string
        chapter_id_of_quiz:
          type: integer
        quiz_release_date:
          type: string
          format: date
        quiz_duration:
          type: string
          pattern: "^\\d{2}:\\d{2}:\\d{2}$"
        quiz_is_attempted:
          type: boolean
      required: [quiz_name, quiz_description, chapter_id_of_quiz, quiz_release_date, quiz_duration, quiz_is_attempted]

    Question:
      type: object
      properties:
        question_tag:
          type: string
        question_text:
          type: string
        question_option1:
          type: string
        question_option2:
          type: string
        question_option3:
          type: string
        question_option4:
          type: string
        question_answer:
          type: string
      required: [question_tag, question_text, question_option1, question_option2, question_option3, question_option4, question_answer]
